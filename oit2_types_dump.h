/*
   This file has been generated by IDA.
   It contains local type definitions from
   the type library 'oit2'
*/

struct C_SDK::Classes::CVerifiedUserCmd;
struct OneTap::Structs::Animation::Data;
struct C_SDK::Classes::Math::Matrix3x4;
struct C_SDK::Classes::EngineTrace::Ray;
struct C_SDK::Classes::EngineTrace::Trace;
struct C_SDK::Classes::EngineTrace::VirtTable;
struct C_SDK::Classes::EngineTrace;
struct C_SDK::Classes::Math::VirtualMatrix;
struct C_SDK::Classes::INetChannelInfo::VirtTable;
struct C_SDK::Classes::INetChannelInfo;
struct C_SDK::Classes::EngineClient::VirtTable;
struct C_SDK::Classes::Player::Info;
struct C_SDK::Classes::EngineClient;

/* 1 */
enum __TI_flags
{
  TI_IsConst = 0x1,
  TI_IsVolatile = 0x2,
  TI_IsUnaligned = 0x4,
  TI_IsPure = 0x8,
  TI_IsWinRT = 0x10,
};

/* 2 */
enum __CT_flags
{
  CT_IsSimpleType = 0x1,
  CT_ByReferenceOnly = 0x2,
  CT_HasVirtualBase = 0x4,
  CT_IsWinRTHandle = 0x8,
  CT_IsStdBadAlloc = 0x10,
};

/* 3 */
struct FuncInfo
{
  int magicNumber;
  int maxState;
  void *pUnwindMap;
  int nTryBlocks;
  void *pTryBlockMap;
  int nIPMapEntries;
  void *pIPtoStateMap;
  void *pESTypeList;
  int EHFlags;
};

/* 4 */
struct UnwindMapEntry
{
  int toState;
  void *action;
};

/* 5 */
struct TryBlockMapEntry
{
  int tryLow;
  int tryHigh;
  int catchHigh;
  int nCatches;
  void *pHandlerArray;
};

/* 6 */
struct HandlerType
{
  int adjectives;
  void *pType;
  int dispCatchObj;
  void *addressOfHandler;
};

/* 7 */
typedef void **va_list;

/* 8 */
typedef int BOOL;

/* 9 */
union __declspec(align(8)) __m64
{
  unsigned __int64 m64_u64;
  float m64_f32[2];
  __int8 m64_i8[8];
  __int16 m64_i16[4];
  __int32 m64_i32[2];
  __int64 m64_i64;
  unsigned __int8 m64_u8[8];
  unsigned __int16 m64_u16[4];
  unsigned __int32 m64_u32[2];
};

/* 10 */
union __declspec(align(16)) __m128
{
  float clamp;
  unsigned __int64 m128_u64[2];
  __int8 m128_i8[16];
  __int16 m128_i16[8];
  __int32 m128_i32[4];
  __int64 m128_i64[2];
  unsigned __int8 m128_u8[16];
  unsigned __int16 m128_u16[8];
  unsigned __int32 m128_u32[4];
};

/* 11 */
struct __m128d
{
  double m128d_f64[2];
};

/* 12 */
union __declspec(align(16)) __m128i
{
  __int8 m128i_i8[16];
  __int16 m128i_i16[8];
  float rate;
  __int64 m128i_i64[2];
  unsigned __int8 m128i_u8[16];
  unsigned __int16 m128i_u16[8];
  float m128i_u32;
  unsigned __int64 m128i_u64[2];
};

/* 13 */
union __declspec(align(32)) __m256
{
  float m256_f32[8];
};

/* 14 */
union __declspec(align(32)) __m256d
{
  double m256d_f64[4];
};

/* 15 */
union __declspec(align(32)) __m256i
{
  __int8 m256i_i8[32];
  __int16 m256i_i16[16];
  __int32 m256i_i32[8];
  __int64 m256i_i64[4];
  unsigned __int8 m256i_u8[32];
  unsigned __int16 m256i_u16[16];
  unsigned __int32 m256i_u32[8];
  unsigned __int64 m256i_u64[4];
};

/* 19 */
struct __unaligned __declspec(align(1)) C_SDK::Classes::GuiManager::DrawColor
{
  char red;
  char green;
  char blue;
  int alpha;
};

/* 20 */
struct __declspec(align(4)) C_SDK::Classes::CGlobalVarsBase
{
  float m_realTime;
  float m_frameCount;
  float m_absoluteFrameTime;
  float m_absoluteFrameStartTimeSTDdev;
  float m_curTime;
  float m_frameTime;
  int m_maxClients;
  int m_tickCount;
  float m_intervalPerTick;
  float m_interpolationAmount;
  int m_simTicksThisFrame;
  int m_networkProtocol;
  void *m_saveData;
  bool m_isClient;
  bool m_isRemoteClient;
  int m_timestampNetworkingBase;
  int m_timestampRandomizeWindow;
  const char *m_mapName;
  const char *m_mapGroupName;
  int m_mapVersion;
  const char *m_startSpot;
  int m_loadType;
  bool m_isMapLoadFailed;
  bool m_isDeathmatch;
  bool m_isCoop;
  bool m_isTeamPlay;
  int m_maxEntities;
  int m_serverCount;
  void *m_edicts;
};

/* 33 */
struct C_SDK::Classes::Math::Vector::Rectangular
{
  float m_x;
  float m_y;
  float m_z;
};

/* 22 */
struct C_SDK::Classes::CAnimState
{
  char pad_0x0000[24];
  float anim_update_timer;
  char pad_0x001C[12];
  float started_moving_time;
  float last_move_time;
  char pad_0x0030[16];
  float last_lby_time;
  char pad_0x0044[8];
  float run_amount;
  char pad_0x0050[16];
  void *entity;
  __int32 active_weapon;
  __int32 last_active_weapon;
  float last_client_side_animation_update_time;
  __int32 last_client_side_animation_update_framecount;
  float eye_timer;
  float eye_angles_y;
  float eye_angles_x;
  float goal_feet_yaw;
  float current_feet_yaw;
  float torso_yaw;
  float last_move_yaw;
  float lean_amount;
  char pad_0x0094[4];
  float feet_cycle;
  float feet_yaw_rate;
  char pad_0x00A0[4];
  float duck_amount;
  float landing_duck_amount;
  char pad_0x00AC[4];
  C_SDK::Classes::Math::Vector::Rectangular current_origin;
  C_SDK::Classes::Math::Vector::Rectangular last_origin;
  float velocity_x;
  float velocity_y;
  char pad_0x00D0[16];
  float move_direction_1;
  float move_direction_2;
  char pad_0x00E8[4];
  float m_velocity;
  float jump_fall_velocity;
  float clamped_velocity;
  float feet_speed_forwards_or_sideways;
  float feet_speed_unknown_forwards_or_sideways;
  float last_time_started_moving;
  float last_time_stopped_moving;
  bool on_ground;
  bool hit_in_ground_animation;
  char pad_0x0110[4];
  float last_origin_z;
  float head_from_ground_distance_standing;
  float stop_to_full_running_fraction;
  char pad_0x0120[20];
  __int32 is_not_moving;
  char pad_0x0138[32];
  float last_anim_update_time;
  float moving_direction_x;
  float moving_direction_y;
  float moving_direction_z;
  char pad_0x0168[68];
  __int32 started_moving;
  char pad_0x01B0[8];
  float lean_yaw;
  char pad_0x01BC[8];
  float poses_speed;
  char pad_0x01C8[8];
  float ladder_speed;
  char pad_0x01D4[8];
  float ladder_yaw;
  char pad_0x01E0[8];
  float some_pose;
  char pad_0x01EC[20];
  float body_yaw;
  char pad_0x0204[8];
  float body_pitch;
  char pad_0x0210[8];
  float death_yaw;
  char pad_0x021C[8];
  float stand;
  char pad_0x0228[8];
  float jump_fall;
  char pad_0x0234[8];
  float aim_blend_stand_idle;
  char pad_0x0240[8];
  float aim_blend_crouch_idle;
  char pad_0x024C[8];
  float strafe_yaw;
  char pad_0x0258[8];
  float aim_blend_stand_walk;
  char pad_0x0264[8];
  float aim_blend_stand_run;
  char pad_0x0270[8];
  float aim_blend_crouch_walk;
  char pad_0x027C[8];
  float move_blend_walk;
  char pad_0x0288[8];
  float move_blend_run;
  char pad_0x0294[8];
  float move_blend_crouch;
  char pad_0x02A0[4];
  float speed;
  __int32 moving_in_any_direction;
  float acceleration;
  char pad_0x02B0[116];
  float crouch_height;
  __int32 is_full_crouched;
  char pad_0x032C[4];
  float velocity_subtract_x;
  float velocity_subtract_y;
  float velocity_subtract_z;
  float standing_head_height;
  char pad_0x0340[4];
};

/* 23 */
struct C_SDK::Structs::GlowObjectDefinition
{
  void *m_entity;
  char m_glowVector[12];
  float m_alpha;
  unsigned __int8 pad_0014[4];
  float m_unk;
  char pad_001C[4];
  float m_unk2;
  bool m_renderWhenOccluded;
  bool m_renderWhenUnoccluded;
  bool m_fullBloomRender;
  char pad_0027[5];
  int m_glowStyle;
  int m_splitScreenSlot;
  int m_nextFreeSlot;
};

/* 24 */
struct C_SDK::Classes::CPrediction
{
  char pad_0x0000[8];
  bool m_inPrediction;
  char pad_0x0009[1];
  bool m_enginePaused;
  char pad_0x000B[12];
  bool m_firstTime;
};

/* 25 */
struct C_SDK::Classes::CUserCmd
{
  char m_virtualDeconstructor[4];
  int m_commandNumber;
  int m_tickCount;
  C_SDK::Classes::Math::Vector::Rectangular m_viewAngles;
  C_SDK::Classes::Math::Vector::Rectangular m_aimDirection;
  float m_forwardMove;
  float m_sideMove;
  float m_upMove;
  int m_buttons;
  int m_impulse;
  int m_weaponSelect;
  int m_weaponSubType;
  int m_randomSeed;
  __int16 m_mouseX;
  __int16 m_mouseY;
  bool m_hasBeenPredicted;
  C_SDK::Classes::Math::Vector::Rectangular m_headAngles;
  C_SDK::Classes::Math::Vector::Rectangular m_headOffset;
};

/* 26 */
struct C_SDK::Classes::CInput
{
  char m_chillOut[4];
  bool m_trackIRAvailable;
  bool m_mouseInitialized;
  bool m_joystickAdvancedInit;
  char pad_0x08[45];
  void *m_keys;
  char pad_0x38[92];
  int pad_0x41;
  int pad_0x42;
  bool m_cameraInterceptingMouse;
  bool m_cameraInThirdPerson;
  bool m_cameraMovingWithMouse;
  char m_unk;
  char m_cameraOffset[12];
  bool m_cameraDistanceMove;
  char m_unk2[3];
  int m_cameraOldX;
  int m_cameraOldY;
  int m_cameraX;
  int m_cameraY;
  bool m_cameraIsOrthographic;
  char m_unk3[3];
  char m_angPreviousViewAngles[12];
  char m_angPreviousViewAnglesTilt[12];
  float m_lastForwardMove;
  int m_clearInputState;
  char pad_0xE4[8];
  void *m_commands;
  void *m_verifiedCommands;
};

/* 27 */
struct C_SDK::Classes::ConVar
{
  char pad_0x0000[4];
  void *m_next;
  int m_registered;
  char *m_name;
  char *m_helpString;
  int m_flags;
  char pad_0x0018[4];
  void *m_parent;
  char *m_defaultValue;
  char *m_string;
  int m_stringLength;
  float m_value;
  int m_nValue;
  int m_hasMin;
  float m_minVal;
  int m_hasMax;
  float m_maxVal;
  void *m_changeCallback;
};

/* 28 */
typedef struct _SCOPETABLE_ENTRY *PSCOPETABLE_ENTRY;

/* 40 */
typedef unsigned int DWORD;

/* 29 */
struct _EH3_EXCEPTION_REGISTRATION
{
  struct _EH3_EXCEPTION_REGISTRATION *Next;
  PVOID ExceptionHandler;
  PSCOPETABLE_ENTRY ScopeTable;
  DWORD TryLevel;
};

/* 30 */
typedef struct _EH3_EXCEPTION_REGISTRATION EH3_EXCEPTION_REGISTRATION;

/* 31 */
typedef struct _EH3_EXCEPTION_REGISTRATION *PEH3_EXCEPTION_REGISTRATION;

/* 32 */
struct CPPEH_RECORD
{
  DWORD old_esp;
  EXCEPTION_POINTERS *exc_ptr;
  struct _EH3_EXCEPTION_REGISTRATION registration;
};

/* 34 */
struct C_SDK::Classes::CBasePlayerAnimState
{
  _BYTE m_leftDormancy;
  _BYTE gap1[95];
  void *m_data;
  void *m_activeWeapon;
  void *m_lastActiveWeapon;
  float m_lastUpdateTime;
  int m_lastUpdateFrame;
  float m_lastUpdateIncrement;
  float m_eyeYaw;
  float m_eyePitch;
  float m_goalFeetYaw;
  float m_lastFeetYaw;
  float m_moveYaw;
  float m_lastMoveYaw;
  float m_leanAmount;
  byte pad1[4];
  _BYTE gap98[4];
  float m_moveWeight;
  float m_moveWeightSmoothed;
  float m_duckAmount;
  float m_hitGroundCycle;
  float m_recrouchWeight;
  char m_origin[12];
  char m_lastOrigin[12];
  char m_velocity[12];
  char m_velocityNormalized[12];
  char m_velocityNormalizedNonZero[12];
  float m_velocityLenght2D;
  float m_jumpFallVelocity;
  float m_speedNormalized;
  float m_runningSpeed;
  float m_duckingSpeed;
  float m_durationMoving;
  float m_durationStill;
  bool m_onGround;
  bool m_hitGroundAnimation;
  byte pad2[2];
  float m_nextLowerBodyYawUpdateTime;
  float m_durationInAir;
  float m_leftGroundHeight;
  float m_hitGroundWeight;
  float m_walkToRunTransition;
  byte pad3[4];
  float m_affectedFraction;
  byte pad4[520];
  float m_minBodyYaw;
  float m_maxBodyYaw;
  OneTap::Structs::Animation::Data *m_feetWeight;
  float m_feetCycle;
  float m_animsetVersion;
};

/* 64 */
struct __declspec(align(4)) OneTap::Structs::Animation::Data
{
  _BYTE gap0[112];
  _BYTE isAnimationUpdateRequest;
  _DWORD dword74;
  _DWORD dword78;
  _DWORD dword7C;
  _BYTE gap80[12];
  _DWORD dword8C;
  _BYTE gap90[740];
  float m_absYaw_0_;
  float m_absYaw_1_;
};

/* 35 */
struct C_SDK::Classes::CAnimationLayer
{
  char pad0[20];
  int m_order;
  int m_sequence;
  float m_prevCycle;
  float m_weight;
  float m_weightDeltaRate;
  float m_playbackRate;
  float m_cycle;
};

/* 36 */
struct C_SDK::Structs::EventInfo
{
  int m_userId;
  int m_attackerId;
  char m_health;
  char m_armor;
  __unaligned __declspec(align(1)) const char *m_weapon;
  __unaligned __declspec(align(1)) int m_damageHealth;
  char m_damageArmor;
  char m_hitGroup;
};

/* 38 */
typedef unsigned __int8 BYTE;

/* 39 */
#pragma pack(push, 4)
union _IMAGE_SECTION_HEADER::$39DFBA39B6D121CDFC1ACE66C995549C
{
  DWORD PhysicalAddress;
  DWORD VirtualSize;
};
#pragma pack(pop)

/* 41 */
typedef unsigned __int16 WORD;

/* 37 */
#pragma pack(push, 4)
struct _IMAGE_SECTION_HEADER
{
  BYTE Name[8];
  _IMAGE_SECTION_HEADER::$39DFBA39B6D121CDFC1ACE66C995549C Misc;
  DWORD VirtualAddress;
  DWORD SizeOfRawData;
  DWORD PointerToRawData;
  DWORD PointerToRelocations;
  DWORD PointerToLinenumbers;
  WORD NumberOfRelocations;
  WORD NumberOfLinenumbers;
  DWORD Characteristics;
};
#pragma pack(pop)

/* 43 */
struct OneTap::Classes::CBufferedCommand
{
  __declspec(align(4)) C_SDK::Classes::CUserCmd *m_instance;
  __declspec(align(4)) C_SDK::Classes::CVerifiedUserCmd *m_verifiedCommand;
  __declspec(align(4)) C_SDK::Classes::Math::Vector::Rectangular m_wishMove;
  __declspec(align(4)) C_SDK::Classes::Math::Vector::Rectangular m_viewAngles;
};

/* 42 */
struct OneTap::Classes::CommandManager
{
  __declspec(align(4)) int m_sequence;
  __declspec(align(4)) int m_prevSequence;
  __declspec(align(4)) int m_unknown;
  __declspec(align(4)) OneTap::Classes::CBufferedCommand m_commands[150];
  __declspec(align(4)) bool m_init;
  char m_choked[1][15];
};

/* 44 */
struct C_SDK::Classes::CVerifiedUserCmd
{
  _BYTE gap0[76];
  unsigned int m_crc32;
};

/* 46 */
enum C_SDK::Security::FNV1A::Modules
{
  C_SDK::Security::FNV1A::Modules::ClientPanorama = 0x63DC72EC,
  C_SDK::Security::FNV1A::Modules::Tier0 = 0x8DA048BB,
  C_SDK::Security::FNV1A::Modules::Engine = 0xEE05D83B,
};

/* 47 */
struct __declspec(align(4)) OneTap::Classes::Player::LagData
{
  _BYTE gap0[36];
  _BYTE m_flags;
  _BYTE gap25[19];
  float m_resolve_m_eyeAngles_y;
  _BYTE gap3C[12];
  float m_vecVelocity_y;
  float m_vecVelocity_z;
  _BYTE gap50[216];
  float m_serverLayers_adjust_weight;
  _BYTE gap12C[8];
  float m_serverLayers_adjust_cycle;
  _BYTE gap138[152];
  float m_serverLayers_movement;
  _BYTE gap1D4[4];
  float m_serverLayers_movement_playRate;
  _BYTE gap1DC[324];
  float m_serverLayers_lean;
  _BYTE gap324[29];
  _BYTE m_way;
  _DWORD m_side;
  _BYTE gap348[376];
  float m_resolverLayers_none_movement_playRate;
  _BYTE gap4C4[724];
  float m_resolverLayers_right_movement_playRate;
  _BYTE gap79C[724];
  float m_resolverLayers_left_movement_playRate;
};

/* 50 */
enum C_SDK::Server::Types
{
  C_SDK::Server::Types::DEFAULT = 0x0,
  C_SDK::Server::Types::LEGACY = 0x1,
  C_SDK::Server::Types::FAKE_LEGACY = 0x2,
};

/* 51 */
struct C_SDK::Classes::CWeapon::CCSWeaponInfo
{
  _BYTE pad00[1984];
  void *m_iconActive;
  _BYTE pad774[60];
  float m_armorRatio;
  _BYTE pad02[16];
  float m_penetration;
  int m_Damage;
  float m_range;
  float m_rangeModifier;
  int m_bulletsPerShot;
};

/* 52 */
struct C_SDK::Classes::Math::Vector::Flat
{
  float m_x;
  float m_y;
};

/* 53 */
struct C_SDK::Classes::Math::Vector::Aligned
{
  float m_x;
  float m_y;
  float m_z;
  float m_w;
};

/* 54 */
struct C_SDK::Classes::Weapon::TEFireBullets
{
  _BYTE gap0[12];
  _DWORD m_player;
  _WORD m_unk;
  C_SDK::Classes::Math::Vector::Rectangular m_origin;
  C_SDK::Classes::Math::Vector::Rectangular m_angles;
  _DWORD m_weaponID;
  _DWORD m_mode;
  float float38;
  float m_seed;
  float dword40;
  _DWORD dword44;
};

/* 55 */
struct __declspec(align(1)) C_SDK::Classes::Engine::ConVar
{
  _DWORD pad00;
  C_SDK::Classes::Engine::ConVar *m_next;
  int m_isRegistered;
  char *m_pszName;
  char *m_pszHelpString;
  int m_flags;
  _DWORD pad18;
  C_SDK::Classes::Engine::ConVar *m_parent;
  char *m_pszDefaultValue;
  char *m_strString;
  int m_stringLength;
  float m_floatVal;
  int m_intVal;
  int m_hasMin;
  float m_minVal;
  int m_hasMax;
  float m_maxVal;
  void *m_changeCallback;
};

/* 56 */
typedef void *(__cdecl *C_SDK::Functions::Engine::CreateClientClass)(int entity, int serial);

/* 57 */
struct __declspec(align(4)) C_SDK::Classes::Engine::ClientClass
{
  C_SDK::Functions::Engine::CreateClientClass m_createClient;
  void *m_createEvent;
  char *m_networkName;
  void *m_recvTable;
  C_SDK::Classes::Engine::ClientClass *m_next;
  int m_classID;
};

/* 58 */
struct C_SDK::Classes::Engine::BaseClient::VirtualTable
{
  void *pad00;
  void *pad01;
  void *pad02;
  void *pad03;
  void *pad04;
  void *pad05;
  void *pad06;
  void *pad07;
  C_SDK::Classes::Engine::ClientClass *(__stdcall *C_SDK::Functions::Engine::ClientClass::GetClientClass)();
};

/* 59 */
struct C_SDK::Classes::Engine::BaseClient
{
  C_SDK::Classes::Engine::BaseClient::VirtualTable *m_virTable;
};

/* 60 */
struct __declspec(align(4)) OneTap::Classes::AnimationSystem::PlayerAnimationData
{
  BYTE m_flags[8];
  _DWORD m_lowerBodyYaw;
  C_SDK::Classes::Math::Vector::Rectangular m_angles;
  float float18;
  _BYTE gap1C[4];
  _DWORD m_qualityStatus;
  _BYTE m_flagsCount;
  char gap25[11];
  float m_quality;
  float m_feetCycle;
  float m_feetWeight;
  _BYTE gap3C[12];
  _DWORD dword48;
  _DWORD dword4C;
  _DWORD dword50;
  _BYTE gap54[12];
  void *m_entity;
};

/* 62 */
struct __unaligned __declspec(align(1)) OneTap::Classes::AnimationData
{
  _BYTE gap0[8];
  _DWORD m_lag;
  _BYTE gapC[4];
  float float10;
  _BYTE byte14;
  _BYTE gap15[3];
  float float18;
  _BYTE gap1C[4];
  _DWORD dword20;
  _BYTE byte24;
  _BYTE gap25[15];
  _DWORD m_eyeAngles_x;
  float m_eyeAngles_y;
  _BYTE gap3C[12];
  _DWORD dword48;
  _DWORD dword4C;
  _DWORD dword50;
  _BYTE gap54[12];
  char char60;
};

/* 67 */
struct __unaligned __declspec(align(1)) OneTap::Classes::Player::AnimLagData
{
  _BYTE m_leftDormancy;
  _BYTE gap1[7];
  _DWORD lag;
  _BYTE gapC[4];
  float yaw;
  _BYTE byte14;
  _BYTE gap15[3];
  float float18;
  _BYTE gap1C[4];
  _DWORD dword20;
  _BYTE m_flags;
  _BYTE gap25[15];
  _DWORD m_eyeAngles_x;
  float m_eyeAngles_y;
  _BYTE gap3C[12];
  _DWORD dword48;
  _DWORD dword4C;
  _DWORD dword50;
  _BYTE gap54[12];
  char m_data;
};

/* 68 */
enum C_SDK::Engine::IClientMode::FSN
{
  C_SDK::Engine::IClientMode::FSN::FRAME_START = 0x0,
  C_SDK::Engine::IClientMode::FSN::FRAME_NET_UPDATE_START = 0x1,
  C_SDK::Engine::IClientMode::FSN::FRAME_NET_UPDATE_POSTDATAUPDATE_START = 0x2,
  C_SDK::Engine::IClientMode::FSN::FRAME_NET_UPDATE_POSTDATAUPDATE_END = 0x3,
  C_SDK::Engine::IClientMode::FSN::FRAME_NET_UPDATE_END = 0x4,
  C_SDK::Engine::IClientMode::FSN::FRAME_RENDER_START = 0x5,
  C_SDK::Engine::IClientMode::FSN::FRAME_RENDER_END = 0x6,
  C_SDK::Engine::IClientMode::FSN::FRAME_UNDEFINED = 0xFFFFFFFF,
};

/* 69 */
struct C_SDK::Classes::ClockDriftMgr
{
  float m_clockOffsets[16];
  int m_curClockOffset;
  int m_serverTick;
  int m_clientTick;
};

/* 70 */
struct C_SDK::Classes::ClientState
{
  char pad_0000[156];
  unsigned int m_netChannel;
  unsigned int m_challengeNr;
  char pad_00A4[100];
  unsigned int m_signonState;
  char pad_010C[8];
  float m_nextCmdTime;
  unsigned int m_serverCount;
  unsigned int m_currentSequence;
  char pad_0120[8];
  C_SDK::Classes::ClockDriftMgr m_clockDriftMgr;
  unsigned int m_deltaTick;
  bool m_isPaused;
  char pad_017D[3];
  unsigned int m_viewEntity;
  unsigned int m_playerSlot;
  char m_levelName[260];
  char m_levelNameShort[40];
  char m_groupName[40];
  char pad_02DC[56];
  unsigned int m_maxClients;
  char pad_0314[18940];
  C_SDK::Classes::Math::Vector::Rectangular m_viewAngles;
  int m_unk;
  int m_unk2;
  unsigned int m_lastOutGoingCommand;
  unsigned int m_chokedCommands;
};

/* 72 */
typedef void *(__cdecl *C_SDK::Classes::ClientClass::CreateClientClass)(int index, int serialNum);

/* 73 */
struct __declspec(align(4)) C_SDK::Classes::ClientClass
{
  C_SDK::Classes::ClientClass::CreateClientClass m_create;
  void *m_createEvent;
  char *m_networkName;
  void *m_recvTable;
  C_SDK::Classes::ClientClass *m_next;
  int m_classID;
};

/* 75 */
typedef int (__cdecl *C_SDK::Classes::IBaseClientDll::Init)(void *appSystemFactory, void *globals);

/* 76 */
typedef void (__cdecl *C_SDK::Classes::IBaseClientDll::PostInit)();

/* 77 */
typedef void (*C_SDK::Classes::IBaseClientDll::Shutdown)(void);

/* 78 */
typedef void (__cdecl *C_SDK::Classes::IBaseClientDll::LevelInitPreEntity)(const char *mapName);

/* 79 */
typedef void (__cdecl *C_SDK::Classes::IBaseClientDll::LevelInitPostEntity)();

/* 80 */
typedef void (*C_SDK::Classes::IBaseClientDll::LevelShutdown)(void);

/* 81 */
typedef C_SDK::Classes::ClientClass *(*C_SDK::Classes::IBaseClientDll::GetAllClasses)(void);

/* 74 */
struct __declspec(align(4)) C_SDK::Classes::IBaseClientDll
{
  C_SDK::Classes::IBaseClientDll::Init m_init;
  C_SDK::Classes::IBaseClientDll::PostInit m_postInit;
  C_SDK::Classes::IBaseClientDll::Shutdown m_shutdown;
  C_SDK::Classes::IBaseClientDll::LevelInitPreEntity m_levelInitPreEntity;
  C_SDK::Classes::IBaseClientDll::LevelInitPostEntity m_levelInitPostEntity;
  C_SDK::Classes::IBaseClientDll::LevelShutdown m_levelShutdown;
  C_SDK::Classes::IBaseClientDll::GetAllClasses m_getAllClasses;
};

/* 82 */
enum C_SDK::Classes::Player::HitGroup
{
  C_SDK::Classes::Player::HitGroup::HEAD = 0x0,
  C_SDK::Classes::Player::HitGroup::CHEST = 0x1,
  C_SDK::Classes::Player::HitGroup::LEFT_ARM = 0x2,
  C_SDK::Classes::Player::HitGroup::RIGHT_ARM = 0x3,
  C_SDK::Classes::Player::HitGroup::STOMACH = 0x4,
  C_SDK::Classes::Player::HitGroup::LEFT_LEG = 0x5,
  C_SDK::Classes::Player::HitGroup::RIGHT_LEG = 0x6,
};

/* 84 */
struct __declspec(align(4)) OneTap::SharedData::ClientSnapshot
{
  int UnkData;
  char pad_0001[12];
  int UnkData2;
  char pad_0002[12];
  int *LocalPlayer;
  char pad_0003[12];
  int UnkData3;
  char pad_0004[12];
  C_SDK::Classes::EngineClient *EngineClient;
  char pad_0005[12];
  C_SDK::Classes::EngineTrace *EngineTrace;
  char pad_0006[12];
  C_SDK::Classes::CGlobalVarsBase *GlobalVars;
  char pad_0007[12];
  int UnkData5;
  char pad_0008[12];
  int ISurface;
  char pad_0009[12];
  int UnkData6;
  char pad_0010[12];
  int UnkData7;
  char pad_0011[12];
  int UnkData8;
  char pad_0012[12];
  C_SDK::Classes::CPrediction *Prediction;
  char pad_0013[12];
  int UnkData9;
  char pad_0014[12];
  int IDirect3DDevice9;
  char pad_0015[12];
  int UnkData11;
  char pad_00016[12];
  int PhysicsSurfaceProps;
  char pad_0017[12];
  C_SDK::Classes::ClientState *ClientState;
  char pad_0018[12];
};

/* 97 */
struct C_SDK::Classes::EngineClient
{
  C_SDK::Classes::EngineClient::VirtTable *m_vtable;
};

/* 91 */
struct C_SDK::Classes::EngineTrace
{
  C_SDK::Classes::EngineTrace::VirtTable *m_vtable;
};

/* 95 */
struct C_SDK::Classes::EngineClient::VirtTable
{
  int pad00;
  int pad01;
  int pad02;
  int pad03;
  int pad04;
  void (__stdcall *GetScreenSize)(int *, int *);
  int pad06;
  void (__stdcall *GetClientCmd)(const char *);
  bool (__stdcall *GetPlayerInfo)(int, C_SDK::Classes::Player::Info *);
  int (__stdcall *GetPlayerForUserID)(int);
  int pad10;
  int pad11;
  int (__stdcall *GetLocalPlayer)();
  int pad13;
  int pad14;
  int pad15;
  int pad16;
  int pad17;
  void (__stdcall *GetViewAngles)(C_SDK::Classes::Math::Vector::Rectangular *);
  void (__stdcall *SetViewAngles)(C_SDK::Classes::Math::Vector::Rectangular *);
  int (__stdcall *GetMaxClients)();
  int pad21;
  int pad22;
  int pad23;
  int pad24;
  int pad25;
  bool (__stdcall *IsInGame)();
  int pad27;
  int pad28;
  int pad29;
  int pad30;
  int pad31;
  int pad32;
  int pad33;
  int pad34;
  int pad35;
  int pad36;
  C_SDK::Classes::Math::VirtualMatrix *(__stdcall *WorldToScreenMatrix)();
  int pad38;
  int pad39;
  int pad40;
  int pad41;
  int pad42;
  int pad43;
  int pad44;
  int pad45;
  int pad46;
  int pad47;
  int pad48;
  int pad49;
  int pad50;
  int pad51;
  int pad52;
  int pad53;
  int pad54;
  int pad55;
  int pad56;
  int pad57;
  int pad58;
  int pad59;
  int pad60;
  int pad61;
  int pad62;
  int pad63;
  int pad64;
  int pad65;
  int pad66;
  int pad67;
  int pad68;
  int pad69;
  int pad70;
  int pad71;
  int pad72;
  int pad73;
  int pad74;
  int pad75;
  int pad76;
  int pad77;
  C_SDK::Classes::INetChannelInfo *(__stdcall *GetNetChannelInfo)();
  int pad79;
  int pad80;
};

/* 90 */
struct C_SDK::Classes::EngineTrace::VirtTable
{
  int (__stdcall *GetPointContents)(C_SDK::Classes::Math::Vector::Rectangular *absPosition, int contentsMask, void ***entity);
  int pad01;
  int pad02;
  void (__stdcall *ClipRayToEntity)(C_SDK::Classes::EngineTrace::Ray *, unsigned int, void *, C_SDK::Classes::EngineTrace::Trace *);
  int pad04;
  void (__stdcall *TraceRay)(C_SDK::Classes::EngineTrace::Ray *ray, unsigned int mask, void *traceFilter, C_SDK::Classes::EngineTrace::Trace *trace);
};

/* 96 */
struct C_SDK::Classes::Player::Info
{
  char pad00[8];
  int m_xuidLow;
  int m_xuidHigh;
  char m_name[128];
  int m_userID;
  char m_guid[33];
  char pad02[163];
};

/* 92 */
struct C_SDK::Classes::Math::VirtualMatrix
{
  float m_matrix[4][4];
};

/* 94 */
struct C_SDK::Classes::INetChannelInfo
{
  C_SDK::Classes::INetChannelInfo::VirtTable *m_vtable;
};

/* 86 */
struct __declspec(align(1)) C_SDK::Classes::EngineTrace::Ray
{
  C_SDK::Classes::Math::Vector::Aligned m_start;
  C_SDK::Classes::Math::Vector::Aligned m_delta;
  C_SDK::Classes::Math::Vector::Aligned m_startOffset;
  C_SDK::Classes::Math::Vector::Aligned m_extents;
  const C_SDK::Classes::Math::Matrix3x4 *m_worldAxisTransform;
  bool m_isRay;
  bool m_isSwept;
};

/* 89 */
struct __declspec(align(1)) C_SDK::Classes::Engine::CPlane
{
  C_SDK::Classes::Math::Vector::Rectangular m_normal;
  float m_distance;
  unsigned __int8 m_type;
  unsigned __int8 m_signBits;
  unsigned __int8 pad[2];
};

/* 87 */
struct __declspec(align(1)) C_SDK::Classes::Engine::CSurface
{
  const char *m_name;
  __int16 m_surfaceProps;
  unsigned __int16 m_flags;
};

/* 88 */
struct __declspec(align(1)) C_SDK::Classes::EngineTrace::Trace
{
  C_SDK::Classes::Math::Vector::Rectangular m_start;
  C_SDK::Classes::Math::Vector::Rectangular m_endPos;
  C_SDK::Classes::Engine::CPlane m_plane;
  float m_fraction;
  int m_contents;
  _BYTE m_dispFlags[2];
  _BYTE m_allSolid;
  _BYTE m_startSolid;
  float m_fractionLeftSolid;
  C_SDK::Classes::Engine::CSurface m_surface;
  int m_hitGroup;
  __int16 m_physicsBone;
  _BYTE m_worldSurfaceIndex[2];
  void *m_entity;
  int m_hitBox;
};

/* 93 */
struct __declspec(align(4)) C_SDK::Classes::INetChannelInfo::VirtTable
{
  const char *(__stdcall *GetName)();
  const char *(__stdcall *GetAddress)();
  float (__stdcall *GetTime)();
  float (__stdcall *GetTimeConnected)();
  int (__stdcall *GetBufferSize)();
  int (__stdcall *GetDataRate)();
  bool (__stdcall *IsLoopback)();
  bool (__stdcall *IsTimingOut)();
  bool (__stdcall *IsPlayback)();
  float (__stdcall *GetLatency)(int flow);
  float (__stdcall *GetAvgLatency)(int flow);
  float (__stdcall *GetAvgLoss)(int flow);
  float (__stdcall *GetAvgChoke)(int flow);
  float (__stdcall *GetAvgData)(int flow);
  float (__stdcall *GetAvgPackets)(int flow);
  int (__stdcall *GetTotalData)(int flow);
  int (__stdcall *GetTotalPackets)(int flow);
  int (__stdcall *GetSequenceNr)(int flow);
  bool (__stdcall *IsValidPacket)(int flow, int frameNumber);
  float (__stdcall *GetPacketTime)(int flow, int frameNumber);
  int (__stdcall *GetPacketBytes)(int flow, int frameNumber, int group);
  bool (__stdcall *GetStreamProgress)(int flow, int *received, int *total);
  float (__stdcall *GetTimeSinceLastReceived)();
  float (__stdcall *GetCommandInterpolationAmount)(int flow, int frameNumber);
  void (__stdcall *GetPacketResponseLatency)(int flow, int frameNumber, int *latencyMsecs, int *choke);
  void (__stdcall *GetRemoteFramerate)(float *frameTime, float *frameTimeStdDeviation, float *frameStartTimeStdDeviation);
  float (__stdcall *GetTimeoutSeconds)();
};

/* 85 */
struct C_SDK::Classes::Math::Matrix3x4
{
  float m_matVal[3][4];
};

/* 98 */
struct C_SDK::Classes::Engine::Surface::SoundNames
{
  unsigned __int16 m_stepLeft;
  unsigned __int16 m_stepRight;
  unsigned __int16 m_impactSoft;
  unsigned __int16 m_impactHard;
  unsigned __int16 m_scrapeSmooth;
  unsigned __int16 m_scrapeRough;
  unsigned __int16 m_bulletImpact;
  unsigned __int16 m_rolling;
  unsigned __int16 m_breakSound;
  unsigned __int16 m_strainSound;
};

/* 99 */
struct C_SDK::Classes::Engine::Surface::PhysicsParams
{
  float m_friction;
  float m_elasticity;
  float m_density;
  float m_thickness;
  float m_dampening;
  char pad00[4];
};

/* 100 */
struct __declspec(align(4)) C_SDK::Classes::Engine::Surface::GameProps
{
  char pad00[4];
  float m_maxSpeedFactor;
  float m_jumpFactor;
  char pad01[4];
  float m_penetrationModifier;
  float m_damageModifier;
  unsigned __int16 m_material;
  char pad02[3];
};

/* 101 */
struct C_SDK::Classes::Engine::Surface::AudioParams
{
  char pad00[4];
  float m_reflectivity;
  float m_hardnessFactor;
  float m_roughnessFactor;
  float m_roughThreshold;
  float m_hardThreshold;
  float m_hardVelocityThreshold;
};

/* 102 */
struct __declspec(align(4)) C_SDK::Classes::Engine::Surface::Data
{
  C_SDK::Classes::Engine::Surface::PhysicsParams m_physics;
  C_SDK::Classes::Engine::Surface::AudioParams m_audio;
  C_SDK::Classes::Engine::Surface::SoundNames m_sound;
  C_SDK::Classes::Engine::Surface::GameProps m_game;
  char pad00[4];
};

/* 104 */
struct OneTap::Classes::HookManager::Data
{
  __int16 m_isHooked;
  __int16 m_unkData;
  void *m_functionToHook;
  void *m_hookProxy;
  void *m_originalFunctionPointer;
};

/* 108 */
struct C_SDK::Engine::Surface::PanRenderableInfo
{
  void *m_renderable;
  void *m_alphaProperty;
  int m_enumCount;
  int m_renderFrame;
  unsigned __int16 m_firstShadow;
  unsigned __int16 m_leafList;
  __int16 m_area;
  __int16 m_flags;
  __int16 m_flags2;
  C_SDK::Classes::Math::Vector::Rectangular m_bloatedAbsMins;
  C_SDK::Classes::Math::Vector::Rectangular m_bloatedAbsMaxs;
  C_SDK::Classes::Math::Vector::Rectangular m_absMins;
  C_SDK::Classes::Math::Vector::Rectangular m_absMaxs;
  int pad;
};

